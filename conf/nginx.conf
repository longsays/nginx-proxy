user  www;
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;
pid        logs/nginx.pid;

events {
                use epoll;
    worker_connections  1024;
}

http {
				limit_req2_zone $binary_remote_addr $request_uri zone=one:2m rate=6r/s;  
				#第一个动作，1秒内刷新6次
				 limit_req2_zone $binary_remote_addr $uri zone=two:2m rate=18r/s;  
				#第二个动作，1秒内刷新18次
				 limit_req2_zone $binary_remote_addr zone=three:2m rate=38r/s;  
				#第三个动作，1秒内刷新38次
				 lua_shared_dict ips 2m;
				 
                proxy_connect_timeout    5;
                proxy_read_timeout       60;
                proxy_send_timeout       5;
                proxy_buffer_size        16k;
                proxy_buffers            4 64k;
                proxy_busy_buffers_size 128k;
                proxy_temp_file_write_size 128k;
                proxy_temp_path   /home/cache/temp;
                proxy_cache_path  /home/cache/one levels=1:2 keys_zone=cache_one:3m inactive=7d max_size=1g; 

server {
#限制刷新频率
listen 80;
server_name example.com;
root /home/wwwroot/example.com;
location @banip1 {
            default_type text/html;
            set $ip $binary_remote_addr;
            set $val a;
            set $exptime 1;    #限制时间
            set $ipa $remote_addr;
            access_by_lua '
                local ips = ngx.shared.ips
                local vala = ips:get(ngx.var.ip)
                if vala == nil then
                    local setip = ips:set(ngx.var.ip, ngx.var.val, ngx.var.exptime)
                    ngx.say("IP: ", ngx.var.ipa, " 访问频率过高，将被限制 ", ngx.var.exptime, " 秒。")
                else
                    ngx.exec(404)
                end
             ';
        }

        location @banip2 {
            default_type text/html;
            set $ip $binary_remote_addr;
            set $val b;
            set $exptime 5;    #限制时间
            set $ipa $remote_addr;

            access_by_lua '
                local ips = ngx.shared.ips
                local vala = ips:get(ngx.var.ip)
                if vala == nil then
                    local setip = ips:set(ngx.var.ip, ngx.var.val, ngx.var.exptime)
                    ngx.say("IP: ", ngx.var.ipa, " 访问频率过高，将被限制 ", ngx.var.exptime, "秒。")
                else
                    ngx.exec(404)
                end
             ';
        }

        location @banip3 {
            default_type text/html;
            set $ip $binary_remote_addr;
            set $val c;
            set $exptime 3600;    #限制时间
            set $ipa $remote_addr;

            access_by_lua '
                local ips = ngx.shared.ips
                local vala = ips:get(ngx.var.ip)
                if vala == nil then
                    local setip = ips:set(ngx.var.ip, ngx.var.val, ngx.var.exptime)
                    ngx.say("IP: ", ngx.var.ipa, " 访问频率过高，将被限制 ", ngx.var.exptime, " 秒。")
                else
                    ngx.exec(404)
                end
             ';
        }

        location = /forbid1 {
            rewrite ^ /forbid1.html break;  #第一个动作显示的页面
        }

        location = /forbid2 {
            rewrite ^ /forbid2.html break;   #第二个动作显示的页面
        }

        location = /forbid3 {
            return 444;    #第三个动作，直接返回444
        }

location / {
#......  这里自己填写吧。。。。

set $ip $binary_remote_addr;

            rewrite_by_lua '
                local ips = ngx.shared.ips
                local vala = ips:get(ngx.var.ip)
                if vala == nil then
                    return
                end
                if vala == "a" then
                    ngx.exec("/forbid1")
                elseif vala == "b" then
                    ngx.exec("/forbid2")
                elseif vala == "c" then
                    ngx.exec("/forbid3")
                else
                    ngx.exec(404)
                end
             ';

            limit_req2 zone=three forbid_action=@banip3 nodelay;
            limit_req2 zone=two forbid_action=@banip2 nodelay;
            limit_req2 zone=one forbid_action=@banip1 nodelay;

       }




#反向代理
   listen       80;
   server_name  example.com;
   index index.php;      
        #默认首页

  location / {
    subs_filter_types text/html text/css text/xml;
    subs_filter www.baidu.com example.com gi;
#替换模块，下文详解。

    proxy_cache_key "$scheme://$host$request_uri";
#缓存key规则，用于自动清除缓存。

    proxy_cache cache_one; 
#缓存区名称，必须与前面定义的相同

    proxy_cache_valid  200 304 3h;
    proxy_cache_valid 301 3d;
    proxy_cache_valid any 10s;
#200 304状态缓存3小时
#301状态缓存3天
#其他状态缓存（如502 404）10秒

    proxy_set_header   X-Real-IP  $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
#向后端传递访客ip

    proxy_set_header   Referer http://www.baidu.com;	
#强制定义Referer，程序验证判断会用到

    proxy_set_header   Host www.baidu.com;
#定义主机头

    proxy_pass http://1.2.3.4;	
#指定后端ip

    proxy_set_header Accept-Encoding "";	
#清除编码

   proxy_cache_use_stale invalid_header error timeout http_502;
#当后端出现错误、超时、502状态时启用过期缓存
        }
    }
}
